Package $TmpImplicit

export ImplicitHypersurface; // 2017-09 added code for rational param
export ImplicitBySliceFlex;
//export RatReconstructList; // experimental JAA - 20150423
//export ImplicitBySliceFlexQQ;
//export ImplicitBySliceFlexQQ_C5; // CRT in cocoa language
export ProjList; // make this private
export TryAll;

----------------------------------------------------------------------
Define About()
  PrintLn  "    Version  : CoCoA 5.2";
  PrintLn  "    Date     : 15 september 2017";
  PrintLn  "    Version  : CoCoA 5.1";
  PrintLn  "    Date     : 3 November 2014";  
  PrintLn  "    Author   : John Abbott, Anna Bigatti";
EndDefine;
----------------------------------------------------------------------

define ImplicitHypersurface(...)
  input := PreProcessInput(ARGV);
  input.RecDepth := 0;
  if   input.algorithm = "Direct" then input.FinalCall := "IDWCOrd2";
  elif input.algorithm = "ElimTH" then input.FinalCall := "elimth";
  else error("only Direct or ElimTH allowed");
  endif;
  if IsFractionField(input.InRing) then
    return ImplicitHypersurfaceRatParam(input);
  endif;
  if IsQQ(CoeffRing(input.InRing)) then
    IH := SliceCoreQQ(input.ParDescr, input.RecDepth, input.FinalCall);
  else
    IH := SliceCore(input.ParDescr, input.RecDepth, input.FinalCall);
  endif;
  if not("OutRing" isin fields(input)) then return IH; endif;
  PIH := RingOf(IH);
  P := input.OutRing;
  return PolyAlgebraHom(PIH, P, first(indets(P), NumIndets(PIH))) (IH);  
enddefine; -- ImplicitHypersurface


define ImplicitHypersurfaceRatParam(input)
  G := ImplicitHypersurface(ProjList(input.ParDescr), input.algorithm);
  if "OutRing" isin fields(input) then
    Kx := input.OutRing;
  else
    Kx := NewPolyRing(CoeffRing(BaseRing(input.InRing)),
		      SymbolRange("x",1,len(input.ParDescr)));
  endif;
  phi := PolyAlgebraHom(RingOf(G), Kx, concat(indets(Kx),[one(Kx)]));
  return phi(G); --> dehomogenize
enddefine; -- ImplicitHypersurfaceRatParam


Define ImplicitByElim(...)
  input := PreProcessInput(ARGV);
  RH := RingAndHomForImplicitStd(input.OutRing, input.ParDescr);
  X := indets(RH.RE, "x");  T := indets(RH.RE, "t");
  E := elim(T, ideal(X - RH.phi_R_RE(input.ParDescr)));
  return RH.phi_RE_P(gens(E)[1]);
EndDefine; -- ImplicitByElim


Define ImplicitByElimW(...)
  input := PreProcessInput(ARGV);
  RH := RingAndHomForImplicitW(input.OutRing, input.ParDescr);
  X := indets(RH.RE, "x");  T := indets(RH.RE, "t");
  E := elim(T, ideal(X - RH.phi_R_RE(input.ParDescr)));
  return RH.phi_RE_P(gens(E)[1]);
EndDefine; -- ImplicitByElimW


-- define ImplicitBySliceLast(...)
--   input := PreProcessInput(ARGV);
--   E := SliceCore(input.ParDescr, 1, "elim");
--   return E;
-- enddefine; -- ImplicitBySliceLast


-- Define ImplicitBySliceLastW(...)
--   input := PreProcessInput(ARGV);
--   E := SliceCore(input.ParDescr, 1, "elim");
--   return E;
-- EndDefine; -- ImplicitBySliceLastW


-- Define ImplicitBySliceRec(...)
--   input := PreProcessInput(ARGV);
--   RH := RingAndHomForImplicitStd(input.OutRing, input.ParDescr);
--   X := indets(RH.RE, "x");  T := indets(RH.RE, "t");
--   E := SliceCore(T, X, RH.phi_R_RE(input.ParDescr), len(X)-2, "elim");
--   return RH.phi_RE_P(E);
-- EndDefine; -- ImplicitBySliceRec


-- Define ImplicitBySliceRecW(...)
--   input := PreProcessInput(ARGV);
--   RH := RingAndHomForImplicitW(input.OutRing, input.ParDescr);
--   X := indets(RH.RE, "x");  T := indets(RH.RE, "t");
--   E := SliceCore(T, X, RH.phi_R_RE(input.ParDescr), len(X)-2, "elim");
--   return RH.phi_RE_P(E);
-- EndDefine; -- ImplicitBySliceRecW

Define ImplicitBySliceFlex(...)
  input := PreProcessInputFlex(ARGV);
  if IsQQ(CoeffRing(input.InRing)) then
    return ImplicitBySliceFlexQQ(input.OutRing, input.ParDescr, input.RecDepth, input.FinalCall);
  endif;
  E := SliceCore(input.ParDescr, input.RecDepth, input.FinalCall);
  if not("OutRing" isin fields(input)) then return E; endif;
  PE := RingOf(E);
  P := input.OutRing;
  return PolyAlgebraHom(PE, P, first(indets(P), NumIndets(PE))) (E);
EndDefine; -- ImplicitBySliceFlex

--- aux


-- define RatReconstructList(X, M)
--   D := 1;
--   BadFactor := 1;
--   RatList := [];
--   for i := 1 to len(X) do
--     ThisRecon := RatReconstructByContFrac(D*X[i], M);
-- //NOT YET AVAILABLE    BadFactor := BadFactor*ThisRecon.BadFactor;
--     if ThisRecon.failed then return record[failed:=true, BadFactor:=BadFactor]; endif;
--     q := ThisRecon.ReconstructedRat/D;
--     D := lcm(D, den(q));
--     append(ref RatList, q);
--   endfor;
--   return record[ReconstructedRatList:=RatList, BadFactor:=BadFactor, failed:=false];
-- enddefine; -- RatReconstructList


-- define RatReconstructPoly(P, fCRT)
--   if not(IsQQ(CoeffRing(P))) then error("reconstruction only into QQ"); endif;
--   q := fCRT.modulus;
--   f := sum([ LPP(M) * RatReconstructByContFrac(AsINT(LC(M)),q).ReconstructedRat
-- 	    | M in monomials(fCRT.residue)]);
--   return f;
-- enddefine; -- RatReconstructPoly

  ----------------------------------------------------------------------
-- [ A/Den, B/Den, C/Den, .. ] -->
--> homogenize A, B, C, .. Den,  then also [HA, HB, HC, .., HDen]

-- El := [F1, .. Fn] in FrFld(Kt) --returns-->  [HHf1,..HHFn, HHDen] in Kt[h]
define ProjList(El)
  P := BaseRing(RingOf(El[1]));
  Ph := NewPolyRing(CoeffRing(P), concat(SymbolRange("t",1,NumIndets(P)),["h"]));
  phi := PolyAlgebraHom(P, Ph, first(indets(Ph), NumIndets(P)));
  h := RingElem(Ph, "h");
  HDen := homog(phi(lcm([den(F) | F in El])), h);
  El := [ homog(phi(num(F)),h) * (HDen/homog(phi(den(F)),h)) | F in El];
  append(ref El, HDen);
  d := max([deg(HF) | HF in El]);
  return [ HF*h^(d-deg(HF)) | HF in El ];
enddefine; -- ProjList




define Flex_p(QQx, p, El, NumSlices, Algo)
  QQt := RingOf(El[1]);
  Kt  := NewPolyRing(NewZZmod(p), IndetSymbols(QQt));
  f := ImplicitBySliceFlex(PolyAlgebraHom(QQt, Kt, indets(Kt))(El),
			   NumSlices, Algo);
  return sum([AsINT(LC(M))*MakeTerm(QQx, exponents(LPP(M))) | M in monomials(f)]);
enddefine; -- inP
  
----------------------------------------------------------------------

-- define ImplicitBySliceFlexQQ_C5(QQx, El, NumSlices, Algo)
--   eval := PolyAlgebraHom(QQx, RingOf(El[1]), El);
--   p := NextPrime(44000);
--   print "---- p = ", p;
--   fCRT := record[modulus := p, residue := Flex_p(QQx, p, El, NumSlices, Algo)];
--   try
--     PrintLn " RatRec";
--     f := RatReconstructPoly(QQx, fCRT);
--     if IsZero(eval(f)) then return f; endif;
--     uponerror e do
--       if GetErrMesg(e) <> "Cannot find a field named \"ReconstructedRat\"" then
-- 	println "---- ", GetErrMesg(e);
--       endif;
--     endtry;
--   while true do
--     p := NextPrime(p);
--     print "---- p = ", p;
--     f := Flex_p(QQx, p, El, NumSlices, Algo);
--     print " CRT";
--     fCRT := CRT_poly(fCRT.residue, fCRT.modulus, f, p);
--     try
--       PrintLn " RatRec";
--       f := RatReconstructPoly(QQx, fCRT);
--       if IsZero(eval(f)) then return f; endif;
--     uponerror e do
--       if GetErrMesg(e) <> "Cannot find a field named \"ReconstructedRat\"" then
-- 	println "---- ", GetErrMesg(e);
--       endif;
--     endtry;
--   endwhile;
-- enddefine; -- ImplicitBySliceFlexQQ

define ImplicitBySliceFlexQQ(QQx, El, NumSlices, Algo)
  input := PreProcessInputFlex([QQx, El, NumSlices, Algo]);
  E := SliceCoreQQ(input.ParDescr, input.RecDepth, input.FinalCall);
  return PolyAlgebraHom(RingOf(E), QQx, first(indets(QQx), NumIndets(RingOf(E)))) (E);
EndDefine; -- ImplicitBySliceFlexQQ

----------------------------------------------------------------------

-- Define Reconstruction(F, L)
--   d := len(L);
--   if d=1 then return one(RingOf(F[1])); endif;
--   PrLWo_i := [product(WithoutNth(L,i)) | i In 1..d];
--   Return sum([ (PrLWo_i[i]*F[i]) / NR(PrLWo_i[i],[L[i]]) | i In 1..d]);
-- EndDefine; -- Reconstruction


-- Define CheckPairwiseComaximal(L)
--   for i := 1 to len(L) do for j := i+1 to len(L) do
--     if not(1 isin ideal(L[i],L[j])) then
--       error("L["+sprint(i)+"] and L["+sprint(j)+"] not comaximal");
--     endif;
--   endfor;  endfor;
-- EndDefine; -- CheckPairwiseCoprime


-- define EvalHom(X, L)
--   R := RingOf(X[1]);
--   img := indets(R);
--   for i:=1 to len(X) Do img[IndetIndex(X[i])] := L[i]; endfor;
--   return PolyAlgebraHom(R, R, img);
-- enddefine; -- EvalHom


define IndexWithMinLen(L)
  NT := [ NumTerms(f) | f in L ];
  MinLen := 100000000;
  N := 0;
  for i:=1 to len(L) do
    if not(IsConstant(L[i])) and NT[i] < MinLen then
      N := i;
      MinLen := NT[i];
    endif;
  endfor;
  return N;
enddefine; -- IndexWithMinLen


define PreProcessInput(ARGs)
  // [L:LIST]  or  [L:LIST, X:STRING] or
  // [OutR:RING, L:LIST]  or  [OutR:RING, L:LIST, X:STRING]
  if ARGs = [] or len(ARGs) > 3 then   error("PreProcessInput:  1, 2, or 3 args expected");  endif;
  if len(ARGs) = 3 and type(last(ARGs)) <> STRING then error("3rd ARG must be a string"); endif;
  if type(last(ARGs)) <> STRING then
    return PreProcessInput(concat(ARGs, ["Direct"]));
  endif;
  if len(ARGs) = 2 then
    L := ARGs[1];
    if L = [] then error("empty list"); endif;
    return record[ParDescr := L, algorithm := last(ARGs), InRing := RingOf(L[1])];
  endif;
  if len(ARGs) = 3 then
    OutR := ARGs[1];
    L := ARGs[2];
    if L = [] then error("empty list"); endif;
    if len(indets(OutR)) < len(L) then error("too few indets"); endif;
    R := RingOf(L[1]);
    if IsPolyRing(R) then K := CoeffRing(R); else K := CoeffRing(BaseRing(R)); endif;
    if CoeffRing(OutR) <> K then error("wrong CoeffRing"); endif;
    return record[OutRing := OutR, ParDescr := L, algorithm := last(ARGs), InRing := R];
  endif;

enddefine; -- PreProcessInput


define PreProcessInputFlex(ARGs) // [OutRing,] ParDescr, RecDepth, FinalCall
  if len(ARGs) = 3 then
    input := PreProcessInput(first(ARGs,1));
    input.RecDepth := ARGs[2];  input.FinalCall := ARGs[3];
    return input;
  endif;
  if len(ARGs) = 4 then
    input := PreProcessInput(first(ARGs,2));
    input.RecDepth := ARGs[3];  input.FinalCall := ARGs[4];
    return input;
  endif;
  error("3 or 4 args expected");
enddefine; -- PreProcessInput

  
-- Define RingAndHomForImplicitW(P, L)  --> K[t[1..r], x[1..n]]
--   R := RingOf(L[1]);
--   Params := indets(R);  -- optimize?
--   -- RING with weights  
--   OrdM := MakeTermOrdMat(mat([concat(NewList(len(Params),1), [deg(f)|f in L])]));
--   syms := concat(SymbolRange("t",1,len(Params)), SymbolRange("x",1,len(L)));
--   RE := NewPolyRing(CoeffRing(R), syms, OrdM, 1);
--   -- IN RINGHOM
--   img := NewList(NumIndets(R), zero(RE));
--   for i:=1 to len(Params) do
--     img[IndetIndex(Params[i])] := indet(RE,i); -- t[i];
--   endfor;
--   -- OUT RINGHOM
--   p := PolyAlgebraHom(RE, P, concat(NewList(len(Params),0), indets(P)));
--   return record[RE := RE, phi_R_RE := PolyAlgebraHom(R,RE,img), phi_RE_P := p];
-- EndDefine; -- RingAndHomForImplicit


-- Define RingAndHomForImplicitStd(P, L)  --> K[t[1..r], x[1..n]]
--   R := RingOf(L[1]);
--   Params := indets(R);  -- optimize?
--   -- RING with std weights  
--   OrdM := MakeTermOrdMat(mat([concat(NewList(len(Params),1), [1|f in L])]));
--   syms := concat(SymbolRange("t",1,len(Params)), SymbolRange("x",1,len(L)));
--   RE := NewPolyRing(CoeffRing(R), syms, OrdM, 1);
--   -- IN RINGHOM
--   img := NewList(NumIndets(R), zero(RE));
--   for i:=1 to len(Params) do
--     img[IndetIndex(Params[i])] := indet(RE,i); -- t[i];
--   endfor;
--   -- OUT RINGHOM
--   p := PolyAlgebraHom(RE, P, concat(NewList(len(Params),0), indets(P)));
--   return record[RE := RE, phi_R_RE := PolyAlgebraHom(R,RE,img), phi_RE_P := p];
-- EndDefine; -- RingAndHomForImplicit



  
define TryAll(ParametricDescr)
  println "len(ParametricDescr) = ", ParametricDescr;
  println ParametricDescr;
  Timings := [];
  if len(ParametricDescr) <= 3 then
    Timings := ["-----", "-----"];
  else
    ----------------------
    T := CpuTime();
    println "--== ImplicitBySliceRec (",last(ParametricDescr),") ==--";
    ISl := ImplicitBySliceRec(ParametricDescr);
    println "--> total time ImplicitBySliceRec:    ", TimeFrom(T);
    append(ref Timings, TimeFrom(T));
    ----------------------
    T := CpuTime();
    println "--== ImplicitBySliceRecW (",last(ParametricDescr),") ==--";
    ISl := ImplicitBySliceRecW(ParametricDescr);
    println "--> total time ImplicitBySliceRecW:   ", TimeFrom(T);
    append(ref Timings, TimeFrom(T));
  endif;
  ----------------------
  T := CpuTime();
  println "--== ImplicitBySliceLast (",last(ParametricDescr),") ==--";
  ISl := ImplicitBySliceLast(ParametricDescr);
  println "--> total time ImplicitBySliceLast:   ", TimeFrom(T);
  append(ref Timings, TimeFrom(T));
  ----------------------
  T := CpuTime();
  println "--== ImplicitBySliceLastW (",last(ParametricDescr),") ==--";
  ISl := ImplicitBySliceLastW(ParametricDescr);
  println "--> total time ImplicitBySliceLastW:  ", TimeFrom(T);
  append(ref Timings, TimeFrom(T));
  ----------------------
  T := CpuTime();
  idx := IndexWithMinLen(ParametricDescr);
  println "--== ImplicitBySliceLast (",ParametricDescr[idx],") ==--";
  swap(ref ParametricDescr[len(ParametricDescr)], ref ParametricDescr[idx]);
  ISl := ImplicitBySliceLast(ParametricDescr);
  println "--> total time ImplicitBySliceLast:   ", TimeFrom(T);
  append(ref Timings, TimeFrom(T));
  ----------------------
  T := CpuTime();
  Print   "--> total time ImplicitByElim:        ";
  E := ImplicitByElim(ParametricDescr);
  println TimeFrom(T);
  append(ref Timings, TimeFrom(T));
  ----------------------
  T := CpuTime();
  print   "--> total time ImplicitByElimW:       ";
  E := ImplicitByElimW(ParametricDescr);
  println TimeFrom(T);
  append(ref Timings, TimeFrom(T));
  println "------------------------------------------------------------";
  println "Timings = ", Timings;
  println "------------------------------------------------------------";
  return Timings;
enddefine; -- TryAll

EndPackage;
----------------------------------------------------------------------
----------------------------------------------------------------------

-- Use BigR ::= ZZ/(32003)[x,y,z,w,a, s,t,u,v];

-- F := ImplicitBySliceLast(Params, X, [s^4-s*t^3-t^2, s^2*t^3-s-1, s*t^4-s]);

-- -- ParametricDescr := [s^4-s*t^3, (s^2*t^5-s)*(s*t^3-s), s*t^3-s];
-- ParametricDescr := [s^4-s*t^3, (s^2*t^5-s)*(s*t^3-s), s*t^3-s];
-- F := ImplicitBySliceLast(ParametricDescr);

----------------------------------------------------------------------
-- this needs explicit check (i.e. deg check not enough)
-- ParametricDescr := [s^2-s*t^3-t^2, s*t^2-s^2+1, s*t*u, s^5-t^2+1];
----------------------------------------------------------------------

----------------------------------------------------------------------
-- John's counterexample test suite: (all max'l PP in support are divided by z)
----------------------------------------------------------------------
-- ParametricDescr := [-s*t +t^2 +s +1, s*t +t^2 +s, t -1];
-- ParametricDescr := [-s*t -t^2 +s, -s*t -t^2 -1, -s -t +1];
-- ParametricDescr := [-s*t -t^2 -s, s*t +t^2 +t -1, s +t -1];
-- ParametricDescr := [s*t +s -1, s*t +t^2 -t, -t +1];
-- ParametricDescr := [-s*t -t^2 -s -1, s*t -t^2 -s, -t -1];
-- ParametricDescr := [s^2 -t^2 +s +1, -s^2 +s*t +s -1, s -t];
-- ParametricDescr := [-s^2 +s*t, s^2 +s*t +t +1, s +1];
-- ParametricDescr := [-s^2 -s*t, -s^2 -s*t -t +1, s +1];
-- ParametricDescr := [-s^2 +s*t +t +1, s^2 -s*t +s +t -1, s -t -1];
-- ParametricDescr := [-s*t +t^2 +s -t +1, s*t +t^2 +s -t -1, t -1];
-- ParametricDescr := [-s*t +t^2 -t -1, -s^2 +s*t -s +t +1, s -t];
-- ParametricDescr := [s^2 -s*t +s +t, s^2 +s*t -s +t -1, -s];
-- ParametricDescr := [-s^2 +s*t +s, -s^2 +s*t +s +t +1, -s -1];

-- ParametricDescr := [s^2 +s*t +s -1, -s^2 -s*t +s -t +1, s^2 +s +1];
-- ParametricDescr := [-s*t +t^2 +t -1, -s*t -t^2 -s, t^2 -t];
-- ParametricDescr := [s*t +t^2 -s +t -1, -s*t -t^2 -s -t, -t^2 +t +1];
-- ParametricDescr := [-s*t +t^2 -s +1, -s*t -t^2 +s +t, -t^2 +t];
-- ParametricDescr := [-s^2 +s*t +s, -s^2 +s*t -t, s^2 -1];
-- ParametricDescr := [-s^2 +s*t +t -1, s*t -s -t -1, -s^2];
-- ParametricDescr := [-s*t -s +1, s*t +t^2 -t, -t^2 +t -1];
-- ParametricDescr := [s*t -t^2 +s +t -1, s*t +t^2 -s +t +1, -t^2 -t +1];
-- ParametricDescr := [-s*t -s +t +1, s^2 -s*t +s, s^2];
-- ParametricDescr := [s^2 +s*t +s -1, -s*t +t +1, -s^2 -s -1];
-- ParametricDescr := [-s*t +t^2 +s -1, s*t -t^2 +s -1, -t^2 -t -1];
-- ParametricDescr := [s*t +s +t -1, s^2 -s*t -s +1, s^2 +s +1];
-- ParametricDescr := [-s*t -t^2 +s +t -1, s*t +t^2 -1, -t^2 -t +1];

-- ParametricDescr := [-s*t-t^2-2*s+t,-2*s*t-2*t^2+2*s+t+1,s^2+2*s*t+t^2-s-t-1];
-- ParametricDescr := [2*s*t -2*s -2*t -2, -s*t -2*t^2 +2*s +t -2, 2*t^2 -t +1];
-- ParametricDescr :=[-s^2+s*t+2*t^2+2*s+t-1,s^2-t^2+2*s+t-1,s^2+2*s*t+t^2+s+t];
-- ParametricDescr := [2*s*t -s -t -2, s^2 +s*t +s -2*t -2, 2*s^2 -2];


-- T := TryAll(ParametricDescr);
-- F := ImplicitBySliceLast(Params, X, ParametricDescr);

-- ImplicitByElimW(ParametricDescr);

-- println "finito!";
