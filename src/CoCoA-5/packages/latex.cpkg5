-- $Id: latex.cpkg5,v 1.23 2018/04/05 14:03:32 bigatti Exp $
-- part of CoCoA distribution

Package $latex

Export latex;
Export LaTeX;

------------------------------------------------------------------

Define Latex_Indet(X)
  L := IndetSubscripts(X);
  S := IndetName(X);
  If L <> [] Then
    S := S + "_{" + sprint(L[1]);
    For J := 2 To len(L) Do
      S := S + "\\, " + sprint(L[J]);
    EndFor;
    S := S + "}";
  EndIf;
  Return S;
EndDefine;


define Latex_Term(T, space)
  L := exponents(T);
  S := "";
  InsertSpace := false;
  for i := 1 to len(L) do
    if L[i] = 0 then continue; endif
    if InsertSpace then S := S + space; endif;
    S := S + $.Latex_Indet(indet(owner(T),i));
    if L[i] = 1 then InsertSpace := true; continue; endif
    if L[i] > 9 then S := S + "^{" + sprint(L[i]) + "} ";
    else S := S + "^"  + sprint(L[i]) + " ";
    endif;
    InsertSpace := false;
  endfor;
  return S;
enddefine;


Define Poly(P)
  if [1] = MakeSet([ len(IndetName(X)) | X in indets(RingOf(P)) ]) then
    space := " ";
  else
    space := " \\!\\: "; // better spacing for LaTeX, could use just " "
  endif;
  S := "";
  CLis := coefficients(P);
  If characteristic(owner(P))<>0 Then CLis := [ AsINT(C) | C In CLis ]; EndIf;
  TLis := support(P);
  If  CLis = [] Then  S := S + " 0";
  Elif deg(TLis[1]) = 0 Then  S := S + LaTeX(CLis[1]);
  Else
    If CLis[1] = -1 Then S := S + " -";
    Elif CLis[1] <> 1 Then S := S + LaTeX(CLis[1]) + space;   EndIf;
    S := S + $.Latex_Term(TLis[1], space);
    For I := 2 To len(CLis) Do
      If deg(TLis[I]) > 0 Then
	If CLis[I] = -1 Then S := S + " -";
	Elif CLis[I] = 1 Then S := S + " +";
	Elif CLis[I] > 0 Then S := S + " +" + LaTeX(CLis[I]) + space;
	Else S := S + " " + LaTeX(CLis[I]) + space;
	EndIf;
        S := S + Latex_Term(TLis[I], space);
      Else
	If CLis[I] > 0 Then S := S + " +" + LaTeX(CLis[I]);
	Else S := S + " " + LaTeX(CLis[I]);
	EndIf;
      EndIf;
    EndFor;
  EndIf;
  Return S;
EndDefine; -- Poly


Define RatF(F)
//  If IsOne(den(F)) Then Return $.Poly(num(F));  EndIf;
  If IsOne(den(F)) Then Return LaTeX(num(F));  EndIf;
  If (type(F)=RAT or IsQQ(RingOf(F))) and F<0 then
    return "-"+LaTeX(-F);
  EndIf;  
  Return "\\frac{" + LaTeX(num(F)) + "}{" + LaTeX(den(F)) + "}";
EndDefine;


Define Mat(A)
  NR := NumRows(A);
  NC := NumCols(A);
  S := "\\left( \\begin{array}{" + sum(NewList(NC, "c")) + "} ";
  For I := 1 To NR Do
    S := S + "\n  ";
    For J := 1 To NC-1 Do
      S := S + LaTeX(A[I,J]) + " & ";
    EndFor;
    S := S + LaTeX(A[I,NC]);
    If I < NR Then S := S + " \\\\"; EndIf;
  EndFor;
  S := S + "\n\\end{array}\\right) ";
  Return S;
EndDefine;

Define List(L)
  S := "[ \\ ";
  LL := len(L);
  If LL > 0 Then S := S + LaTeX(L[1]); EndIf;
  For I := 2 To LL Do
    S := S + ",\n" + LaTeX(L[I]);
  EndFor;
  Return S + "\\ ]";
EndDefine; -- List


Define Ideal(L)
  S := "\\ideal{";
  L := gens(L);
  LL := len(L);
  If LL > 0 Then S := S + LaTeX(L[1]); EndIf;
  For I := 2 To LL Do
    S := S + ",\n" + "  " + LaTeX(L[I]);
  EndFor;
  S := S + "}";
  Return S;
EndDefine;

Define LaTeX(X)
  If type(X) <> type(untagged(X)) Then Return $.StrTagged(X); EndIf;
  If type(X) = RINGELEM And IsPolyRing(RingOf(X))  Then Return $.Poly(X);
//  Elif type(X) = RINGELEM And IsQQ(RingOf(X)) Then Return sprint(X);
  Elif type(X) = RINGELEM And IsFractionField(RingOf(X)) Then Return $.RatF(X);
  Elif type(X) = MAT    Then Return $.Mat(X);
  Elif type(X) = LIST   Then Return $.List(X);
  Elif type(X) = IDEAL  Then Return $.Ideal(X);
  Elif type(X) = RAT    Then Return $.RatF(X);
  Else Return sprint(X);
  EndIf;
EndDefine; -- LaTeX

Define latex(X) Return LaTeX(X); EndDefine;

Define StrTagged(X)
  If type(X)=TAGGED("$gb.Res") Then Return $gb.Latex_Res(X); EndIf;
  Return $.Latex(untagged(X));
EndDefine; -- StrTagged


EndPackage; -- latex



-------------------------------------------------------------
-- THESE SHOULD BE IN A PROPER TEST FILE (or in the doc)!!!

-- Use R ::= QQ[t,x,y,z];
-- F := x-2*y+z-t-1;
-- S := LaTeX(F^2);

-- F := (x-2*y)/(x*z+3);
-- S := LaTeX(F^2);

-- A := mat([[x,2, x+t-3],[y,1, z^12]]);
-- S := LaTeX(A);

-- Use A ::= QQ[x[1..3,1..4]];
-- F := x[1,1] +x[1,3];
-- S := LaTeX(3 F^3);

-- N := mat([ [ x[I,J] | J In 1..4 ] | I In 1..3]);
-- S := LaTeX(N);

-- L := indets();
-- S := LaTeX(L);

-- N := mat([ [ x[I,J]/(x[J,I]+x[I,J]) | J In 1..3 ] | I In 1..3]);
-- S := LaTeX(N);  S;

